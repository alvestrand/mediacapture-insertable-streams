<pre class='metadata'>
Title: MediaStreamTrack Insertable Media Processing using Streams
Shortname: mediacapture-insertable-streams
Level: None
Status: UD
Group: webrtc
Repository: w3c/mediacapture-insertable-streams
URL: https://w3c.github.io/mediacapture-insertable-streams/
Editor: Harald Alvestrand, Google https://google.com, hta@google.com
Editor: Guido Urdaneta, Google https://google.com, guidou@google.com
Abstract: This API defines an API surface for manipulating the bits on
Abstract: {{MediaStreamTrack}}s carrying raw data.
Abstract: NOT AN ADOPTED WORKING GROUP DOCUMENT.
Markup Shorthands: css no, markdown yes
</pre>
<pre class=anchors>
url: https://wicg.github.io/web-codecs/#videoframe; text: VideoFrame; type: interface; spec: WEBCODECS
url: https://wicg.github.io/web-codecs/#audioframe; text: AudioFrame; type: interface; spec: WEBCODECS
url: https://www.w3.org/TR/mediacapture-streams/#mediastreamtrack; text: MediaStreamTrack; type: interface; spec: MEDIACAPTURE-STREAMS
url: https://www.w3.org/TR/mediacapture-streams/#dom-constrainulong; text: ConstrainULong; type: typedef; spec: MEDIACAPTURE-STREAMS
url: https://www.w3.org/TR/mediacapture-streams/#dom-constraindouble; text: ConstrainDouble; type: typedef; spec: MEDIACAPTURE-STREAMS
url: https://www.w3.org/TR/mediacapture-streams/#dom-constraindomstring; text: ConstrainDOMString; type: typedef; spec: MEDIACAPTURE-STREAMS
url: https://www.w3.org/TR/mediacapture-streams/#dom-videoresizemodeenum; text: VideoResizeModeEnum; type: enum; spec: MEDIACAPTURE-STREAMS
url: https://w3c.github.io/mediacapture-main/#idl-def-VideoResizeModeEnum.user; text: none; for: VideoResizeModeEnum; type: enum; spec: MEDIACAPTURE-STREAMS
url: https://w3c.github.io/mediacapture-main/#idl-def-VideoResizeModeEnum.right; text: crop-and-scale; for: VideoResizeModeEnum; type: enum; spec: MEDIACAPTURE-STREAMS
</pre>
<pre class=biblio>
{
  "WEBCODECS": {
     "href":
     "https://wicg.github.io/web-codecs/",
     "title": "WebCodecs"
   },
  "MEDIACAPTURE-SCREEN-SHARE": {
    "href": "https://w3c.github.io/mediacapture-screen-share/",
    "title": "Screen Capture"
  },
  "MEDIACAPTURE-STREAMS": {
    "href": "https://www.w3.org/TR/mediacapture-streams/",
    "title": "Media Capture and Streams"
  }
}
</pre>
<pre class=link-defaults>
spec:streams; type:interface; text:WritableStream
</pre>

# Introduction # {#introduction}

The [[WEBRTC-NV-USE-CASES]] document describes several functions that
can only be achieved by access to media (requirements N20-N22),
including, but not limited to:
* Funny Hats
* Machine Learning
* Virtual Reality Gaming

These use cases further require that processing can be done in worker
threads (requirement N23-N24).

This specification gives an interface inspired by [[WEBCODECS]] to
provide access to such functionality.

This specification provides access to raw media,
which is the output of a media source such as a camera, microphone, screen capture,
or the decoder part of a codec and the input to the
decoder part of a codec. The processed media can be consumed by any destination
that can take a MediaStreamTrack, including HTML &lt;video&gt; and &lt;audio&gt; tags,
RTCPeerConnection, canvas or MediaRecorder.

# Terminology # {#terminology}

# Specification # {#specification}

This specification shows the IDL extensions for [[MEDIACAPTURE-STREAMS]].
It defines some new objects that inherit the {{MediaStreamTrack}} interface, and
can be constructed from a {{MediaStreamTrack}}.

The API consists of two elements. One is a track sink that is
capable of exposing the unencoded media frames from the track to a ReadableStream.
The other one is the inverse of that: it provides a track source that takes
media frames as input.

<!-- ## Extension operation ## {#operation} -->

## MediaStreamTrackProcessor interface ## {#track-processor}

<pre class="idl">
interface MediaStreamTrackProcessor {
    constructor(MediaStreamTrackProcessorInit init);
    attribute ReadableStream readable;  // VideoFrame or AudioFrame
};

dictionary MediaStreamTrackProcessorInit {
  required MediaStreamTrack track;
  [EnforceRange] unsigned short maxBufferSize;
};
</pre>

### Internal slots ### {#internal-slots-processor}
<dl>
<dt><dfn for=MediaStreamTrackProcessor>`[[track]]`</dfn></dt>
<dd>Track whose raw data is to be exposed by the {{MediaStreamTrackProcessor}}.</dd>
<dt><dfn for=MediaStreamTrackProcessor>`[[maxBufferSize]]`</dfn></dt>
<dd>The maximum number of media frames buffered by the {{MediaStreamTrackProcessor}}.</dd>
</dl>

### Constructor ### {#constructor-processor}
<dfn constructor for=MediaStreamTrackProcessor title="MediaStreamTrackProcessor(init)">
  MediaStreamTrackProcessor(|init|)
</dfn>
1. If |init|.{{MediaStreamTrackProcessorInit/track}} is not a valid {{MediaStreamTrack}},
    throw a {{TypeError}}.
2. Let |processor| be a new {{MediaStreamTrackProcessor}} object.
3. Assign |init|.{{MediaStreamTrackProcessorInit/track}} to the `[[track]]`
    internal slot of |processor|.
3. Assign |init|.{{MediaStreamTrackProcessorInit/maxBufferSize}} to the `[[maxBufferSize]]`
    internal slot of |processor|.
4. Return |processor|.

### Attributes ### {#attributes-processor}
<dl>
<dt><dfn for=MediaStreamTrackProcessor>readable</dfn></dt>
<dd>Allows reading the frames flowing through the {{MediaStreamTrack}} stored
in the `[[track]]` internal slot. If `[[track]]`
is a video track, chunks read from {{MediaStreamTrackProcessor/readable}} will be {{VideoFrame}}
objects. If `[[track]]` is an audio track, chunks read from
{{MediaStreamTrackProcessor/readable}} will produce {{AudioFrame}} objects.
If media frames are not read from {{MediaStreamTrackProcessor/readable}} quickly enough,
the {{MediaStreamTrackProcessor}} will internally buffer up to `[[maxBufferSize]]`
of the frames produced by `[[track]]`. If the internal buffer
is full, each time `[[track]]` produces a new frame, the oldest frame
in the buffer MUST be dropped and the new frame MUST be added to the buffer.
</dd>
<p class="note">
The application may detect that frames have been dropped by noticing that there is a gap in the
timestamps of the frames.
</p>
</dl>


## MediaStreamTrackGenerator interface ## {#track-generator}
<pre class="idl">
interface MediaStreamTrackGenerator : MediaStreamTrack {
    constructor(MediaStreamTrackGeneratorInit init);
    attribute WritableStream writable;  // VideoFrame or AudioFrame
};

dictionary MediaStreamTrackGeneratorInit {
  required DOMString kind;
};
</pre>

### Constructor ### {#constructor-generator}
<dfn constructor for=MediaStreamTrackGenerator title="MediaStreamTrackGenerator(init)">
  MediaStreamTrackGenerator(init)
</dfn>
1. If |init|.{{MediaStreamTrackGeneratorInit/kind}} is not `"audio"` or `"video"`,
    throw a {{TypeError}}.
2. Let |g| be a new {{MediaStreamTrackGenerator}} object.
3. Initialize the {{MediaStreamTrack/kind}} field of |g| (inherited from {{MediaStreamTrack}})
    with |init|.{{MediaStreamTrackGeneratorInit/kind}}.
4. Return |g|.

### Attributes ### {#attributes-generator}
<dl>
<dt><dfn attribute for=MediaStreamTrackGenerator>writable</dfn></dt>
<dd>Allows writing media frames the {{MediaStreamTrackGenerator}}, which is
itself a {{MediaStreamTrack}}. If the {{MediaStreamTrack/kind}} attribute is `"audio"`,
the stream will accept {{AudioFrame}} objects and fail with any other type. If
{{MediaStreamTrack/kind}} is `"video"`, the stream will accept {{VideoFrame}} objects
and fail with any other type. When a frame is written to {{MediaStreamTrackGenerator/writable}},
the frame's `close()` method is automatically invoked, so that its internal resources are no longer
accessible from JavaScript.
</dd>
</dl>

### Specialization of MediaStreamTrack behavior ### {#generator-as-track}
A {{MediaStreamTrackGenerator}} is a {{MediaStreamTrack}}. This section adds
clarifications on how a {{MediaStreamTrackGenerator}} behaves as a
{{MediaStreamTrack}}.

#### clone #### {#generator-clone}
The {{MediaStreamTrack/clone}} method on a {{MediaStreamTrackGenerator}}
returns a new {{MediaStreamTrack}} object whose source is the
same as the one for the {{MediaStreamTrackGenerator}} being cloned.
This source is the {{MediaStreamTrackGenerator/writable}} field of
the {{MediaStreamTrackGenerator}}.

#### stop #### {#generator-stop}
The {{MediaStreamTrack/stop}} method on a {{MediaStreamTrackGenerator}} stops
the track. When the last track connected to
the {{MediaStreamTrackGenerator/writable}} of a {{MediaStreamTrackGenerator}} is
stopped, its {{MediaStreamTrackGenerator/writable}} is [=WritableStream/closing|closed=].

#### Constrainable properties #### {#generator-constrainable-properties}

The following constrainable properties are defined for video
{{MediaStreamTrackGenerator}}s and any {{MediaStreamTrack}}s sourced from
a {{MediaStreamTrackGenerator}}:
<table>
  <thead>
    <tr>
      <th>
        Property Name
      </th>
      <th>
        Values
      </th>
      <th>
        Notes
      </th>
    </tr>
  </thead>
  <tbody>
    <tr id="def-constraint-width">
      <td data-tests="">
        <dfn>width</dfn>
      </td>
      <td>
        {{ConstrainULong}}
      </td>
      <td>
        As a setting, this is the width, in pixels, of the latest
        frame delivered by the track.
        As a capability, `max` MUST reflect the
        largest width a {{VideoFrame}} may have, and `min`
        MUST reflect the smallest width a {{VideoFrame}} may have.
      </td>
    </tr>
    <tr id="def-constraint-height">
      <td data-tests="">
        <dfn>height</dfn>
      </td>
      <td>
        {{ConstrainULong}}
      </td>
      <td>
        As a setting, this is the height, in pixels, of the latest
        frame delivered by the track.
        As a capability, `max` MUST reflect the largest height
        a {{VideoFrame}} may have, and `min` MUST reflect
        the smallest height a {{VideoFrame}} may have.
      </td>
    </tr>
    <tr id="def-constraint-frameRate">
      <td data-tests="">
        <dfn>frameRate</dfn>
      </td>
      <td>
        {{ConstrainDouble}}
      </td>
      <td>
        As a setting, this is an estimate of the frame rate based on frames
        recently delivered by the track.
        As a capability `min` MUST be zero and
        `max` MUST be the maximum frame rate supported by the system.
      </td>
    </tr>
    <tr id="def-constraint-aspect">
      <td data-tests="">
        <dfn>aspectRatio</dfn>
      </td>
      <td>
        {{ConstrainDouble}}
      </td>
      <td>
        As a setting, this is the aspect ratio of the latest frame
        delivered by the track;
        this is the width in pixels divided by height in pixels as a
        double rounded to the tenth decimal place. As a capability,
        `min` MUST be the
        smallest aspect ratio supported by a {{VideoFrame}}, and `max` MUST be
        the largest aspect ratio supported by a {{VideoFrame}}.
      </td>
    </tr>
    <tr id="def-constraint-resizeMode">
      <td data-tests="">
        <dfn>resizeMode</dfn>
      </td>
      <td>
        {{ConstrainDOMString}}
      </td>
      <td>
        As a setting, this string should be one of the members of
        {{VideoResizeModeEnum}}. The value "{{VideoResizeModeEnum/none}}"
        means that the frames output by the MediaStreamTrack are unmodified
        versions of the frames written to the
        {{MediaStreamTrackGenerator/writable}} backing
        the track, regardless of any constraints.
        The value "{{VideoResizeModeEnum/crop-and-scale}}" means
        that the frames output by the MediaStreamTrack may be cropped and/or
        downscaled versions
        of the source frames, based on the values of the width, height and
        aspectRatio constraints of the track.
        As a capability, the values "{{VideoResizeModeEnum/none}}" and
        "{{VideoResizeModeEnum/crop-and-scale}}" both MUST be present.
      </td>
    </tr>
  </tbody>
</table>

The {{MediaStreamTrack/applyConstraints}} method applied to a video {{MediaStreamTrack}}
sourced from a {{MediaStreamTrackGenerator}} supports the properties defined above.
It can be used, for example, to resize frames or adjust the frame rate of the track.
Note that these constraints have no effect on the {{VideoFrame}} objects
written to the {{MediaStreamTrackGenerator/writable}} of a {{MediaStreamTrackGenerator}},
just on the output of the track on which the constraints have been applied.

The following constrainable properties are defined for audio {{MediaStreamTrack}}s
sourced from a {{MediaStreamTrackGenerator}}, but in an informational capacity
only available via {{MediaStreamTrack/getSettings}}. It is not possible to
reconfigure an audio track sourced by a {{MediaStreamTrackGenerator}} using
{{MediaStreamTrack/applyConstraints}} in the same way that it is possble to,
for example, resize the frames of a video track.
{{MediaStreamTrack/getCapabilities}} MUST return an empty object.
<table>
  <thead>
    <tr>
      <th>
        Property Name
      </th>
      <th>
        Values
      </th>
      <th>
        Notes
      </th>
    </tr>
  </thead>
  <tbody>
    <tr id="def-constraint-sampleRate">
      <td data-tests="">
        <dfn>sampleRate</dfn>
      </td>
      <td>
        {{ConstrainDouble}}
      </td>
      <td>
        As a setting, this is the sample rate, in samples per second, of the
        latest {{AudioFrame}} delivered by the track.
      </td>
    </tr>
    <tr id="def-constraint-channelCount">
      <td data-tests="">
        <dfn>channelCount</dfn>
      </td>
      <td>
        {{ConstrainULong}}
      </td>
      <td>
        As a setting, this is the number of independent audio channels of the
        latest {{AudioFrame}} delivered by the track.
      </td>
    </tr>
    <tr id="def-constraint-sampleSize">
      <td data-tests="">
        <dfn>sampleSize</dfn>
      </td>
      <td>
        {{ConstrainULong}}
      </td>
      <td>
        As a setting, this is the linear sample size of the latest {{AudioFrame}}
        delivered by the track.
      </td>
    </tr>
  </tbody>
</table>

#### Events and attributes #### {#generator-events-attributes}
Events and attributes work the same as for any {{MediaStreamTrack}}.
It is relevant to note that if the {{MediaStreamTrackGenerator/writable}}
stream of a {{MediaStreamTrackGenerator}} is closed, all the live
tracks connected to it, possibly including the {{MediaStreamTrackGenerator}}
itself, are ended and the `ended` event is fired on them.

# Examples # {#examples}
Consider a face recognition function `detectFace(videoFrame)` that returns a face position
(in some format), and a manipulation function `blurBackground(videoFrame, facePosition)` that
returns a new VideoFrame similar to the given `videoFrame`, but with the non-face parts blurred.

<pre class="example">
let stream = await getUserMedia({video:true});
let videoTrack = stream.getVideoTracks()[0];
let trackProcessor = new MediaStreamTrackProcessor(videoTrack);
let trackGenerator = new MediaStreamTrackGenerator();
let transformer = new TransformStream({
   async transform(videoFrame, controller) {
      let facePosition = await detectFace(videoFrame);
      let newFrame = blurBackground(videoFrame, facePosition);
      videoFrame.close();
      controller.enqueue(newFrame);
  }
});

// After this, trackGenerator can be assigned to any sink such as a
// peer connection, or media element.
trackProcessor.readable
    .pipeThrough(transformer)
    .pipeTo(trackGenerator.writable);
</pre>

# Security and Privacy considerations # {#security-considerations}

This API defines a {{MediaStreamTrack}} source and a {{MediaStreamTrack}} sink.
The security and privacy of the source ({{MediaStreamTrackGenerator}}) relies
on the same-origin policy. That is, the data {{MediaStreamTrackGenerator}} can
make available in the form of a {{MediaStreamTrack}} must be visible to
the document before a {{VideoFrame}} or {{AudioFrame}} object can be constructed
and pushed into the {{MediaStreamTrackGenerator}}. Any attempt to create
{{VideoFrame}} or {{AudioFrame}} objects using cross-origin data will fail.
Therefore, {{MediaStreamTrackGenerator}} does not introduce any new
fingerprinting surface.

The {{MediaStreamTrack}} sink introduced by this API ({{MediaStreamTrackProcessor}})
exposes {{MediaStreamTrack}} the same data that is exposed by other
{{MediaStreamTrack}} sinks such as WebRTC peer connections, Web Audio
{{MediaStreamAudioSourceNode}} and media elements. The security and privacy
of {{MediaStreamTrackProcessor}} relies on the security and privacy of the
{{MediaStreamTrack}} sources of the tracks to which {{MediaStreamTrackProcessor}}
is connected. For example, camera, microphone and screen-capture tracks
rely on explicit use authorization via permission dialogs (see
[[MEDIACAPTURE-STREAMS]] and [[MEDIACAPTURE-SCREEN-SHARE]]),
while element capture and {{MediaStreamTrackGenerator}}
rely on the same-origin policy.
A potential issue with {{MediaStreamTrackProcessor}} is resource exhaustion.
For example, a site might hold on to too many open {{VideoFrame}} objects
and deplete a system-wide pool of GPU-memory-backed frames. UAs can
mitigate this risk by limiting the number of pool-backed frames a site can
hold. This can be achieved by reducing the maximum number of buffered frames
and by refusing to deliver more frames to {{MediaStreamTrackProcessor/readable}}
once the budget limit is reached. Accidental exhaustion is also mitigated by
automatic closing of {{VideoFrame}} and {{AudioFrame}} objects once they
are written to a {{MediaStreamTrackGenerator}}.
